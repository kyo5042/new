



// simple bfs

from collections import deque
def bfs(graph, start):
    visited = set()
    queue = deque([start])
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            visited.add(vertex)
            print(vertex)
# Explore neighbors
        neighbors = graph[vertex]
        for neighbor in neighbors:
            if neighbor not in visited:
                queue.append(neighbor)
# Example usage
graph = {
'A': ['B', 'C'],
'B': ['A', 'D', 'E'],
'C': ['A', 'F'],
'D': ['B'],
'E': ['B', 'F'],
'F': ['C', 'E']
}
start_vertex = 'A'
bfs(graph, start_vertex)


// romania bfs
from collections import deque
def bfs(graph, start,goal):
    visited = set()
    queue = deque([start])
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            visited.add(vertex)
            print(vertex)
# Explore neighbors
        neighbors = graph[vertex]
        for neighbor in neighbors:
            if neighbor not in visited:
                queue.append(neighbor)
        if neighbor == goal:
            print(neighbor)
            return
# Example usage
graph = {'A': ['Z', 'S', 'T'],
         'B': ['U','P', 'G','F'],
         'C': ['D', 'R', 'P'],
         'D': ['M'],
         'E': ['H'],
         'I': ['V','N'],
         'L': ['T','M'],
         'O': ['Z','S'],
         'P': ['R'],
         'U': ['V'],
         'G':['B'],
         'N':['I'],
         'V': ['I','U'],
         'Z': ['O','A'],
         'S': ['O','A','R','F'],
         'T': ['A','L'],
         'M': ['L','D'],
         'R': ['S','P','C'],
         'F': ['S','B']}
start_vertex = 'A'
goal='B'
bfs(graph, start_vertex,goal)

// idfs romania
dict_hn={'Arad':336,'Bucharest':0,'Craiova':160,'Drobeta':242,'Eforie':161,
         'Fagaras':176,'Giurgiu':77,'Hirsova':151,'Iasi':226,'Lugoj':244,
         'Mehadia':241,'Neamt':234,'Oradea':380,'Pitesti':100,'Rimnicu':193,
         'Sibiu':253,'Timisoara':329,'Urziceni':80,'Vaslui':199,'Zerind':374}

dict_gn=dict(
Arad=dict(Zerind=75,Timisoara=118,Sibiu=140),
Bucharest=dict(Urziceni=85,Giurgiu=90,Pitesti=101,Fagaras=211),
Craiova=dict(Drobeta=120,Pitesti=138,Rimnicu=146),
Drobeta=dict(Mehadia=75,Craiova=120),
Eforie=dict(Hirsova=86),
Fagaras=dict(Sibiu=99,Bucharest=211),
Giurgiu=dict(Bucharest=90),
Hirsova=dict(Eforie=86,Urziceni=98),
Iasi=dict(Neamt=87,Vaslui=92),
Lugoj=dict(Mehadia=70,Timisoara=111),
Mehadia=dict(Lugoj=70,Drobeta=75),
Neamt=dict(Iasi=87),
Oradea=dict(Zerind=71,Sibiu=151),
Pitesti=dict(Rimnicu=97,Bucharest=101,Craiova=138),
Rimnicu=dict(Sibiu=80,Pitesti=97,Craiova=146),
Sibiu=dict(Rimnicu=80,Fagaras=99,Arad=140,Oradea=151),
Timisoara=dict(Lugoj=111,Arad=118),
Urziceni=dict(Bucharest=85,Hirsova=98,Vaslui=142),
Vaslui=dict(Iasi=92,Urziceni=142),
Zerind=dict(Oradea=71,Arad=75)
)
import queue as Q
#from RMP import dict_hn

start='Arad'
goal='Bucharest'
result=''

def DLS(city, visitedstack, startlimit, endlimit):
    global result
    found=0
    result=result+city+' '
    visitedstack.append(city)
    if city==goal:
        return 1
    if startlimit==endlimit:
        return 0
    for eachcity in dict_gn[city].keys():
        if eachcity not in visitedstack:
            found=DLS(eachcity, visitedstack, startlimit+1, endlimit)
            if found:
                return found

def IDDFS(city, visitedstack, endlimit):
    global result
    for i in range(0, endlimit):
        print("Searching at Limit: ",i)
        found=DLS(city, visitedstack, 0, i)
        if found:
            print("Found")
            break
        else:
            print("Not Found! ")
            print(result)
            print("-----")
            result=' '
            visitedstack=[]

def main():
    visitedstack=[]
    IDDFS(start, visitedstack, 9)
    print("IDDFS Traversal from ",start," to ", goal," is: ")
    print(result)


main()


// Astar romania
dict_hn={'Arad':336,'Bucharest':0,'Craiova':160,'Drobeta':242,'Eforie':161,
         'Fagaras':176,'Giurgiu':77,'Hirsova':151,'Iasi':226,'Lugoj':244,
         'Mehadia':241,'Neamt':234,'Oradea':380,'Pitesti':100,'Rimnicu':193,
         'Sibiu':253,'Timisoara':329,'Urziceni':80,'Vaslui':199,'Zerind':374}

dict_gn=dict(
Arad=dict(Zerind=75,Timisoara=118,Sibiu=140),
Bucharest=dict(Urziceni=85,Giurgiu=90,Pitesti=101,Fagaras=211),
Craiova=dict(Drobeta=120,Pitesti=138,Rimnicu=146),
Drobeta=dict(Mehadia=75,Craiova=120),
Eforie=dict(Hirsova=86),
Fagaras=dict(Sibiu=99,Bucharest=211),
Giurgiu=dict(Bucharest=90),
Hirsova=dict(Eforie=86,Urziceni=98),
Iasi=dict(Neamt=87,Vaslui=92),
Lugoj=dict(Mehadia=70,Timisoara=111),
Mehadia=dict(Lugoj=70,Drobeta=75),
Neamt=dict(Iasi=87),
Oradea=dict(Zerind=71,Sibiu=151),
Pitesti=dict(Rimnicu=97,Bucharest=101,Craiova=138),
Rimnicu=dict(Sibiu=80,Pitesti=97,Craiova=146),
Sibiu=dict(Rimnicu=80,Fagaras=99,Arad=140,Oradea=151),
Timisoara=dict(Lugoj=111,Arad=118),
Urziceni=dict(Bucharest=85,Hirsova=98,Vaslui=142),
Vaslui=dict(Iasi=92,Urziceni=142),
Zerind=dict(Oradea=71,Arad=75)
)
import queue as Q
#from RMP import dict_gn
#from RMP import dict_hn

start='Arad'
goal='Bucharest'
result=''

def get_fn(citystr):
    cities=citystr.split(" , ")
    hn=gn=0
    for ctr in range(0, len(cities)-1):
        gn=gn+dict_gn[cities[ctr]][cities[ctr+1]]
    hn=dict_hn[cities[len(cities)-1]]
    return(hn+gn)

def expand(cityq):
    global result
    tot, citystr, thiscity=cityq.get()
    if thiscity==goal:
        result=citystr+" : : "+str(tot)
        return
    for cty in dict_gn[thiscity]:
        cityq.put((get_fn(citystr+" , "+cty), citystr+" , "+cty, cty))
    expand(cityq)

def main():
    cityq=Q.PriorityQueue()
    thiscity=start
    cityq.put((get_fn(start),start,thiscity))
    expand(cityq)
    print("The A* path with the total is: ")
    print(result)

main()

//rbfs romania
dict_hn={'Arad':336,'Bucharest':0,'Craiova':160,'Drobeta':242,'Eforie':161,
         'Fagaras':176,'Giurgiu':77,'Hirsova':151,'Iasi':226,'Lugoj':244,
         'Mehadia':241,'Neamt':234,'Oradea':380,'Pitesti':100,'Rimnicu':193,
         'Sibiu':253,'Timisoara':329,'Urziceni':80,'Vaslui':199,'Zerind':374}

dict_gn=dict(
Arad=dict(Zerind=75,Timisoara=118,Sibiu=140),
Bucharest=dict(Urziceni=85,Giurgiu=90,Pitesti=101,Fagaras=211),
Craiova=dict(Drobeta=120,Pitesti=138,Rimnicu=146),
Drobeta=dict(Mehadia=75,Craiova=120),
Eforie=dict(Hirsova=86),
Fagaras=dict(Sibiu=99,Bucharest=211),
Giurgiu=dict(Bucharest=90),
Hirsova=dict(Eforie=86,Urziceni=98),
Iasi=dict(Neamt=87,Vaslui=92),
Lugoj=dict(Mehadia=70,Timisoara=111),
Mehadia=dict(Lugoj=70,Drobeta=75),
Neamt=dict(Iasi=87),
Oradea=dict(Zerind=71,Sibiu=151),
Pitesti=dict(Rimnicu=97,Bucharest=101,Craiova=138),
Rimnicu=dict(Sibiu=80,Pitesti=97,Craiova=146),
Sibiu=dict(Rimnicu=80,Fagaras=99,Arad=140,Oradea=151),
Timisoara=dict(Lugoj=111,Arad=118),
Urziceni=dict(Bucharest=85,Hirsova=98,Vaslui=142),
Vaslui=dict(Iasi=92,Urziceni=142),
Zerind=dict(Oradea=71,Arad=75)
)
import queue as Q


start='Arad'
goal='Bucharest'
result=''


def get_fn(citystr):
    cities=citystr.split(',')
    hn=gn=0
    for ctr in range(0,len(cities)-1):
        gn=gn+dict_gn[cities[ctr]][cities[ctr+1]]
    hn=dict_hn[cities[len(cities)-1]]
    return(hn+gn)

def printout(cityq):
    for i in range(0,cityq.qsize()):
        print(cityq.queue[i])

def expand(cityq):
    global result
    tot,citystr,thiscity=cityq.get()
    nexttot=999
    if not cityq.empty():
        nexttot,nextcitystr,nextthiscity=cityq.queue[0]
    if thiscity==goal and tot<nexttot:
        result=citystr+'::'+str(tot)
        return
    print("Expanded city------------------------------",thiscity)
    print("Second best f(n)------------------------------",nexttot)
    tempq=Q.PriorityQueue()
    for cty in dict_gn[thiscity]:
            tempq.put((get_fn(citystr+','+cty),citystr+','+cty,cty))
    for ctr in range(1,3):
        ctrtot,ctrcitystr,ctrthiscity=tempq.get()
        if ctrtot<nexttot:
            cityq.put((ctrtot,ctrcitystr,ctrthiscity))
        else:
            cityq.put((ctrtot,citystr,thiscity))
            break
    printout(cityq)
    expand(cityq)
def main():
    cityq=Q.PriorityQueue()
    thiscity=start
    cityq.put((999,"NA","NA"))
    cityq.put((get_fn(start),start,thiscity))
    expand(cityq)
    print(result)
main()

//decsion tree resturant waiting
import math

class DataSet:
    def __init__(self, ds):
        self.dataset = ds      
    
    def print(self):
        print(self.dataset)
    
    def uniqueAns(self): 
        return len(set(self.dataset["Ans"]))
    
    def getMaxOccur(self):
        d = {self.dataset["Ans"].count(x): x for x in self.dataset["Ans"]}
        keys = sorted(d.keys(), reverse=True)
        return d[keys[0]] if len(keys) > 1 and keys[0] != keys[1] else None
    
    def copy(self):
        newdataset = {key: self.dataset[key].copy() for key in self.dataset.keys()}
        return DataSet(newdataset)

    def maxInfoGain(self):
        features = self.dataset["Features"]
        if features:
            maxinfogain = self.infoGain(features[0])
            maxfeat = features[0]
            for feat in features:
                ig = self.infoGain(feat)                
                if ig >= maxinfogain:
                    maxinfogain = ig
                    maxfeat = feat
            return maxfeat
        return None
            
    def infoGain(self, feat):
        if feat in self.dataset:
            featlist1 = self.dataset[feat]
            total = len(featlist1)
            featset = set(featlist1)
            d = {item: featlist1.count(item) for item in featset}
            branches = self.splitOnFeature(feat)
            gain = sum((d[key] / total) * dsobj.getEntropy() for key, dsobj in branches.items())
            return self.getEntropy() - gain
        print("Feature does not exist")
        return None

    def getEntropy(self):
        list1 = self.dataset["Ans"]
        total = len(list1)
        aset = set(list1)
        d = {item: list1.count(item) for item in aset}
        ent = -sum((d[k]/total) * math.log(d[k]/total, 2) for k in aset)
        return ent
        
    def splitOnFeature(self, feat):
        if feat in self.dataset["Features"]:
            ans_set = set(self.dataset[feat])
            newfeatures = self.dataset["Features"].copy()
            newfeatures.remove(feat)
            newdataset = {akey: [] for akey in self.dataset.keys() if akey != feat}
            newdataset["Features"] = newfeatures
            branches = {akey: {key: [] for key in newdataset} for akey in ans_set}
            
            for i, featval in enumerate(self.dataset[feat]):
                if featval in branches:
                    branches[featval]["Ans"].append(self.dataset["Ans"][i])
                    for nfeat in newfeatures:
                        branches[featval][nfeat].append(self.dataset[nfeat][i])
            
            for key in branches:
                branches[key] = DataSet(branches[key])
                
            return branches
        print(feat, "feature is not available")
        return None

def calculateAns(dsobj, feature, maxoccur, descr):
    branches = dsobj.splitOnFeature(feature)
    
    for key, newdsobj in branches.items():
        if newdsobj.uniqueAns() == 1:
            print("Answer for", descr + "-" + feature, "with value =", key, "is:", newdsobj.dataset['Ans'][0])
        elif newdsobj.uniqueAns() == 0 or (newdsobj.uniqueAns() > 1 and not newdsobj.dataset["Features"]):
            print("Answer for", descr + "-" + feature, "with value =", key, "is:", maxoccur)            
        else:
            newfeat = newdsobj.maxInfoGain()
            newmaxoccur = newdsobj.getMaxOccur() or maxoccur
            calculateAns(newdsobj, newfeat, newmaxoccur, descr + ":" + feature + ":->" + key + " ")

dataset = {
    "Ans": ["Wait", "Wait", "Leave", "Wait", "Wait", "Wait", "Leave", "Leave", "Wait", "Leave"],
    "Features": ["Reservation", "Raining", "BadService"],
    "Reservation": ["T", "T", "T", "F", "T", "T", "T", "T", "T", "F"],
    "Raining": ["T", "F", "T", "T", "T", "T", "F", "T", "T", "F"],
    "BadService": ["F", "F", "T", "F", "F", "F", "T", "T", "F", "F"]
}

d1 = DataSet(dataset)
if d1.uniqueAns() != 1:
    feat = d1.maxInfoGain()
    calculateAns(d1, feat, d1.getMaxOccur(), "")

//feed forward-back propagation neural network

from math import exp

def activate(weights, inputs):
    activation = weights[-1]  # Bias term
    for i in range(len(weights) - 1):
        activation += weights[i] * inputs[i]
    print('Activation value : ', activation)
    return activation

# Transfer neuron activation to output
def transfer(activation):
    return 1.0 / (1.0 + exp(-activation))

# Forward propagate input to a network output
def forward_propagate(network, row):
    inputs = row
    for layer in network:
        new_inputs = []
    for neuron in layer:
        activation = activate(neuron['weights'], inputs)
        neuron['output'] = transfer(activation)
        new_inputs.append(neuron['output'])
    inputs = new_inputs
    return inputs

# Test forward propagation
network = [
    [{'weights': [0.13, 0.84]}],  # Adding bias term to weights
    [{'weights': [0.25, 0.49]}],  # Adding bias term to weights
    [{'weights': [0.44, 0.65]}]   # Adding bias term to weights
]
row = [1, 0, None]  # Including bias input of 1 in the input row
output = forward_propagate(network, row)
print('Output : ', output)


//add boost ensemble learning
class Perceptron :
    def __init__(self, a,b,c,tval):
        self.x = a #nput vector
        self.y = b # activation result
        self.result = c # summation result
        self.threshold = tval
        self.w= []
    def h(self,tw): # calculating summation hypothesis function
        hresult= []
        for i in range(0 , len(self.result)):
            hresult.append(0)
            for j in range(0,len(tw)):
                hresult[i]=hresult[i]+(tw[j][i]*self.x[j][i])   
        return hresult
    def checkthreshold(self, hresult):  # hard threshold function technique for regression
        flag = True
        actfun =[]
        for i in range(0 , len(self.result)) :            
            if (hresult[i] <= self.threshold ):
                actfun.append(0)
            else :
                actfun.append(1)
        print("Ans:",hresult)
        print("Result act fun:", actfun)

        for i in range(0 , len(self.x)) :
            if (actfun[i] != self.result[i]) :
                return False
        return True   
    def training(self, tw, alpha):#passing w vector and alpha value
        i=1
        while i<=10 : # Max 10 attempts                        
                print("Attempt ", i  )
                hresult = self.h(tw) 
                if(self.checkthreshold(hresult)) : #if training result matches the test result                   
                    self.w = tw                                     
                    print("In Attempt number ", i,  ", i got it! I think i have learnt enough: w0-->")
                    for x in range(0,len(self.w)):
                        print("w",x,"->",self.w[x])
                    break
                i = i +1      
                # Changing values of w to reduce error/loss using batch gradient descent learning rule
                for j in range(0,len(self.result)) :
                    for k in range(0,len(tw)):
                        sum=0
                        for n in range(0,len(tw)):
                            sum=sum+(self.result[j]-hresult[j])*self.x[n][j]  
                        tw[k][j] = tw[k][j] + alpha*sum
        if(i>=100):
            print("I am exhausted, tried 100 iterations! plz change something else...")        
a = [[1,1,1,1],[0,0,1,1],[0,1,0,1]]#x vector,x0 is dummy
b = [0,1,1,1]
c = [0.5,0.7,1.3,1.5]#sample h values
p = Perceptron(a,b,c,0.5)
print("Whether reservation is done =", p.x[0])
print("Whether raining outside=", p.x[1])
print("With threshold value =", p.threshold)
r=p.h([[0.5,0.5,0.5,0.5],[0.8,0.8,0.8,0.8],[0.2,0.2,0.2,0.2]])
print("Status:",p.checkthreshold(r))
print("Trying with alpha=0.01 -->")
p.training([[0.7,0.7,0.7,0.7],[0.5,0.5,0.5,0.5],[0.4,0.4,0.4,0.4]],0.01)
print("Trying with alpha=0.5 -->")
p.training([[0.7,0.7,0.7,0.7],[0.5,0.5,0.5,0.5],[0.4,0.4,0.4,0.4]],0.5)
print("Trying with new data-->")
p.training([[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3],[0.5,0.5,0.5,0.5]],0.01)


//navebase
class NaiveBayes:
    def __init__(self, f, r):
        self.features = f
        self.response = r

    def predict(self,custcase):
        anskeys = list(self.response.keys())
        ansvalues = dict.fromkeys(anskeys,0)
        #print(custcase)
        for key in anskeys :
            ansvalues[key] = self.response[key]
            
            for ikey, ival in custcase.items() :
                ansvalues[key] = ansvalues[key] * self.features[ikey][ival][key]

        print(ansvalues)

        #calculating MAP
        maxkey=""
        maxans=-1
        for ikey, ival in ansvalues.items():
            if ival > maxans :
                maxans= ival
                maxkey = ikey
        return maxkey
        
        
#precalculated values from worksheet - "naive bayes classifier working"
response = {"Wait":0.4, "Leave":0.6}

features = {
    "Reservation":
                    {
                        "Yes" : {"Wait":0.5, "Leave":0.666667},
                         "No" : {"Wait":0.5, "Leave":0.333333}
                    } ,
    "Time>30":
                    {
                        "Yes" : {"Wait":0.25, "Leave":0.83333},
                         "No" : {"Wait":0.75, "Leave":0.16667}
                    }                  
}



nb = NaiveBayes(features, response)

#print("Probability :", nb.features["Reservation"]["Yes"]["Wait"])
#print("Probability :", nb.features["Time>30"]["No"]["Leave"])

resstatus = input("Manager asks Customer, have you reserved table?(Yes/No):")
timestatus = input("Customer asks Manager, Will it take more than 30 mins?(Yes/No):")

custcase = {"Reservation":resstatus, "Time>30":timestatus}

print("Manager predicts that Customer will :" , nb.predict(custcase) )


// n Queen
import numpy as np

global N
N = 4

def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j],'\t',end=' ')
        print()
def isSafe(board,row,col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i , j in zip(range(row , -1 , -1),range(col, -1 , -1)):
        if board[i][j] == 1:
            return False
    for i , j in zip(range(row , N , 1),range(col, -1 , -1)):
        if board[i][j] == 1:
            return False
    return True
def solveNQUtil(board, col):
    if col >= N:
        return True
    for i in range(N):
        if isSafe(board , i , col):
            board[i][col] = 1
            if solveNQUtil(board, col + 1) == True:
                return True
            board[i][col] = 0
    return False
def solveNQ():
    board = np.zeros((4 , 4))
    print('Initial Board : \n',board)
    if solveNQUtil(board , 0) == False:
        print('Solution doesn\'t exist')
        return False
    print('\nBoard after the N Queen Solution : \n')
    printSolution(board)
    return True
#Driver program to test above function
solveNQ()

//water jug problem
def water_jug_problem(jug1_cap , jug2_cap , target_amount):
    j1 = 0
    j2 = 0
    actions = [('fill',1) , ('fill',2) , ('empty',1) , ('empty',2) , ('pour', 1, 2) , ('pour', 2 , 1)]
    #Create an empty set to store visited states
    visited = set()
    queue = [(j1 , j2, [] )]
    while queue:
        j1, j2 , seq = queue.pop(0)
        if (j1, j2) not in visited:
            visited.add((j1 , j2))
        if j1 == target_amount:
            return seq
        for action in actions:
            if action[0] == 'fill':
                if action[1] == 1:
                    next_state = (jug1_cap, j2)
                else:
                    next_state = (j1, jug2_cap)
            elif action[0] == 'empty':
                if action[1] == 1:
                    next_state = (0, j2)
                else:
                    next_state = (j1, 0)
            else:
                if action[1] == 1:
                    amount = min(j1, jug2_cap - j2)
                    next_state = (j1 - amount , j2 + amount)
                else:
                    amount = min(j2, jug1_cap - j1)
                    next_state = (j1 + amount, j2 - amount)
            if next_state not in visited:
                next_seq = seq + [action]
                queue.append((next_state[0] , next_state[1] , next_seq))
    return None
result = water_jug_problem(4, 3, 2)
print(result)

